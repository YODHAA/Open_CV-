// 06-06-2018 

1. Segementation : Partioning images into different images.
                   
        a:> understanding contours
        b:> sorting contours by size.
        c:> approx contours and convex hull .
        d:> matching contours shapes.
        e:> Identifying Shapes.

 Part-2: Counting Circles and shapes. 
           a:> circle, Line , Blob Detection .


Lets Start:
=============

 import cv2
 import numpy as np

 images=cv2.imread("ellipse.png")
 cv2.imshow("Input Images ", images)
 cv2.waitKey(0)

 gray=cv2.cvtColor(images,cv2.COLOR_BGR2GRAY)

 edged=cv2.Canny(gray,30,200)
 cv2.imshow("Canny Images",edged)
 cv2.waitKey(0)

 contours,hierarchy=cv2.findContours(edged.copy(),cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_NONE)
 cv2.imshow("Canny Edges after Contouring ",edged)
 cv2.waitKey(0)

 print ("Number of countours found: "+ str(len(contours)))

 cv2.drawContours(images,contours,-1,(0,255,0),3)

 cv2.imshow("Contours",images)

 cv2.waitKey(0)
 cv2.destroyAllWindows()



2 .  In contour function we have :  image, Hierarchy types ,approximation method type. 

 Sorting Contours :
----------------------
     1. Sorting by AREA(contour area) and SPATIAL POSITION(using centroid).

    Trick: take contour from original image and place it over the black array . 
    ------ 
        
        now code it 

        import cv2
        import numpy as np

        image=cv2.imread("shapesD.png")
        cv2.imshow("Original Image: ",image)
        cv2.waitKey(0)

        black_image=np.zeros((image.shape[0],image.shape[1],3))

        original_image=image

        gray=cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)

        edged=cv2.Canny(gray,50,200)
        cv2.imshow(" Canny Image",edged)
        cv2.waitKey(0)

        _,contours,hierarchy=cv2.findContours(edged.copy(),cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_NONE)

        print("Number of contours found : ",len(contours))

        cv2.drawContours(black_image,contours,-1,(0,255,0),3)
        cv2.imshow("Blank Image ",black_image)
        cv2.waitKey(0)

        cv2.drawContours(image,contours,-1,(0,255,0),3)
        cv2.imshow("All Contours",image)
        cv2.waitKey(0)

        cv2.destroyAllWindows()


   2. Sort by Area on Contour Size: 


          import cv2
          import numpy as np

          def get_contour_areas(contours):
              all_areas=[]
              for cnt in contours:
                  area=cv2.contourArea(cnt)
                  all_areas.append(area)
              return all_areas

          image=cv2.imread("shapesD.png")
          original_image=image

          print "Contor Areas before sorting "
          print get_contour_areas(contours)

          sorted_contours=sorted(contours,key=cv2.contourArea,reverse=True)

          print "Contour Area After Sorting "
          print get_contour_areas(sorted_contours)

          for c in sorted_contours:
                cv2.drawContours(original_image,[c],-1,(255,0,0),3)
                cv2.waitKey(0)
                cv2.imshow('contour by area',original_image)

         cv2.waitKey(0)
         cv2.destroyAllWindows()


    3. Sort by spatial Left to right:


     import cv2
     import numpy as np

     def x_cord_contours(contours):
            if cv2.contourArea(contour)>10:
                M=cv2.moments(contours)
                return (int(M['m10']/M['m00']))

     def label_contour_center(image,c,i):
            M=cv2.moments(c)
            cx=int(M['m10']/M['m00'])
            cy=int(M['m01']/M['m00'])
            cv2.circle(image,(cx,cy),10,(0,0,255),-1)
            return image



     image=cv2.imread("all_shapes.png",0)
     cv2.imshow("Original Image: ",image)
     cv2.waitKey(0)

     black_image=np.zeros((image.shape[0],image.shape[1],3))

     _,contours,hierarchy=cv2.findContours(edged.copy(),cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_NONE)

     print("Number of contours found : ",len(contours))

     cv2.drawContours(black_image,contours,-1,(0,255,0),3)
     cv2.imshow("Blank Image ",black_image)
     cv2.waitKey(0)


     original_image=image.copy()

     for(i,c) in enumerate(contours):
            orig=label_contour_center(image,c,i)

     cv2.imshow(" contour cennter",image)
     cv2.waitKey(0)

     contours_left_to_right=sorted(contours,key=x_cord_contour,reverse=False)

     for (i,c) in enumerate(contours_left_to_right):
             cv2.drawContours(original_image,[c],-1,(0,0,255),3)
             M=cv2.moments(c)
             cx=int(M['m10']/M['m00'])
             cy=int(M['m01']/M['m00'])
             cv2.putText(original_image,str(i+1),(cx,cy),cv2.FONT_HERSHEY_SIMPLEX,1,(0,255,0),2)
             cv2.imshow("Left to right",original_image)
             (x,y,w,h)=cv2.boundingRect(c)

             cropped_contour=original_image[y:y+h,x:x+w]
             image_name="output_shape_number_"+str(i+1)+".jpg"
             print (image_name)
             cv2.imwrite(image_name,cropped_contour)

      cv2.destroyAllWindows()


 
  4. Hand Convex Hull :

       import cv2
       import numpy as np

       image=cv2.imread("hand1.png",0)
       cv2.imshow("Original Image",image)
       cv2.waitKey(0)

       ret,thresh=cv2.threshold(image,176,255,0)
       _,contours,hierarchy=cv2.findContours(thresh.copy(),cv2.RETR_LIST,cv2.CHAIN_APPROX_NONE)

       n=len(contours)-1

       for c in contours:
             hull=cv2.convexHull(c)
             cv2.drawContours(image,[hull],0,(0,255,0),2)
             cv2.imshow("Convex Hull",image)
           
           or 

       for c in contours:
             accuracy=0.03*cv2.arcLength(c,True)
             approx=cv2.approxPolyDP(c,accuracy,True)
             cv2.drawContours(image,[approx],0,(0,255,0),3)
             cv2.imshow("approx ploy DP",image)


       cv2.waitKey(0)
       cv2.destroyAllWindows()



 5.  If pixel value is greater than a threshold value, it is assigned one value (may be white), else it is assigned another value (may be black). 

   


























